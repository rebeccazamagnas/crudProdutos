# CRUD Produtos

Projeto Java local para gerenciamento de produtos com opera√ß√µes de CRUD (Create, Read, Update, Delete) utilizando **JDBC** e **PostgreSQL**. O banco de dados √© executado em um cont√™iner Docker definido no arquivo `docker-compose.yml`.

## üõ† Tecnologias Utilizadas

- **Java 21**  
  Linguagem de programa√ß√£o principal.  
  [Documenta√ß√£o Java](https://docs.oracle.com/en/java/)

- **JDBC (Java Database Connectivity)**  
  API Java para conex√£o com bancos de dados relacionais.  
  [Documenta√ß√£o JDBC](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/)

- **PostgreSQL**  
  Banco de dados relacional utilizado para armazenar os dados dos produtos.  
  [Site oficial PostgreSQL](https://www.postgresql.org/)

- **Docker + Docker Compose**  
  Utilizado para criar e gerenciar o cont√™iner do banco de dados PostgreSQL.  
  [Documenta√ß√£o Docker](https://docs.docker.com/)  
  [Documenta√ß√£o Docker Compose](https://docs.docker.com/compose/)

---

## üì¶ Camadas do Projeto

### Entities
Cont√™m as classes de modelo, como `Produto`, que representam as tabelas do banco de dados.

### Controllers
Respons√°veis por intermediar as requisi√ß√µes do usu√°rio e as opera√ß√µes do reposit√≥rio. Exemplo: `ProdutoController` valida e direciona as a√ß√µes do CRUD.

### Repositories
Implementam o acesso direto ao banco de dados utilizando **JDBC**, como `ProdutoRepository`, que realiza as opera√ß√µes SQL.

### Factories
Cont√™m classes auxiliares, como `ConnectionFactory`, que gerencia a cria√ß√£o de conex√µes com o PostgreSQL.
